import { useState } from 'react';

export default function TestApi() {
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const testSupabaseConnection = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/test-supabase', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json();
      setResult({ success: response.ok, data });
      console.log('Teste Supabase:', data);
    } catch (error) {
      setResult({ success: false, error: error.message });
      console.error('Erro teste:', error);
    }
    setLoading(false);
  };

  const testLeadsApi = async () => {
    setLoading(true);
    try {
      const testData = {
        name: 'Teste Usuario',
        email: 'teste@exemplo.com',
        phone: '(31) 99999-9999',
        company: 'Empresa Teste',
        message: 'Esta é uma mensagem de teste',
        service: 'chatbot-whatsapp'
      };

      const response = await fetch('/api/leads', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testData)
      });

      const data = await response.json();
      setResult({ success: response.ok, data, status: response.status });
      console.log('Teste API Leads:', data);
    } catch (error) {
      setResult({ success: false, error: error.message });
      console.error('Erro teste:', error);
    }
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gray-100 py-12 px-4">
      <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-8">
        <h1 className="text-3xl font-bold mb-8">Teste de APIs</h1>

        <div className="space-y-6">
          <div>
            <h2 className="text-xl font-semibold mb-4">Variáveis de Ambiente:</h2>
            <div className="bg-gray-50 p-4 rounded-lg">
              <p><strong>SUPABASE_URL:</strong> {process.env.NEXT_PUBLIC_SUPABASE_URL ? '✅ Configurado' : '❌ Não configurado'}</p>
              <p><strong>SUPABASE_ANON_KEY:</strong> {process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '✅ Configurado' : '❌ Não configurado'}</p>
            </div>
          </div>

          <div className="space-x-4">
            <button
              onClick={testSupabaseConnection}
              disabled={loading}
              className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50"
            >
              {loading ? 'Testando...' : 'Testar Conexão Supabase'}
            </button>

            <button
              onClick={testLeadsApi}
              disabled={loading}
              className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 disabled:opacity-50"
            >
              {loading ? 'Testando...' : 'Testar API Leads'}
            </button>
          </div>

          {result && (
            <div className={`p-6 rounded-lg ${result.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>
              <h3 className="text-lg font-semibold mb-2">
                {result.success ? '✅ Sucesso' : '❌ Erro'}
              </h3>
              <pre className="text-sm overflow-auto">
                {JSON.stringify(result, null, 2)}
              </pre>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}